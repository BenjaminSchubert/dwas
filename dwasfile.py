"""
Contains the dwas configuration for this project.
"""

from pathlib import Path

import dwas
import dwas.predefined

REQUIREMENTS = "-rrequirements/requirements.txt"
DOCS_REQUIREMENTS = "-rrequirements/requirements-docs.txt"
TEST_REQUIREMENTS = "-rrequirements/requirements-test.txt"
TYPES_REQUIREMENTS = "-rrequirements/requirements-types.txt"
SUPPORTED_PYTHONS = [
    "3.8",
    "3.9",
    "3.10",
    "3.11",
    "3.12",
    "3.13",
    "3.14",
    "pypy3.10",
]
OLDEST_SUPPORTED_PYTHON = SUPPORTED_PYTHONS[0]
PYTHON_FILES = [
    "docs/conf.py",
    "docs/_extensions",
    "src/",
    "tests/",
    "dwasfile.py",
    ".github/scripts/summary.py",
]

ROOT_PATH = Path(__file__).parent
DOCS_SOURCES_PATH = ROOT_PATH / "docs"
ARTIFACTS_PATH = ROOT_PATH / "_artifacts"


##
# Formatting
##
dwas.register_managed_step(
    dwas.predefined.unimport(),
    description="Show which imports are unnecessary",
)
dwas.register_managed_step(dwas.predefined.isort(files=PYTHON_FILES))
dwas.register_managed_step(
    dwas.predefined.docformatter(files=PYTHON_FILES),
    dependencies=["docformatter[tomli]<1.7.1"],
)
dwas.register_managed_step(dwas.predefined.black())
dwas.register_step_group(
    "format-check", ["black", "docformatter", "isort", "unimport"]
)

# With auto fix
dwas.register_managed_step(
    dwas.predefined.unimport(
        additional_arguments=["--diff", "--remove", "--check", "--gitignore"],
    ),
    name="unimport:fix",
    run_by_default=False,
)
dwas.register_managed_step(
    dwas.predefined.isort(
        additional_arguments=["--atomic"], files=PYTHON_FILES
    ),
    name="isort:fix",
    run_by_default=False,
    requires=["unimport:fix"],
)
dwas.register_managed_step(
    dwas.predefined.docformatter(
        additional_arguments=["--recursive", "--diff", "--in-place"],
        files=PYTHON_FILES,
        expected_status_codes=[0, 3],
    ),
    name="docformatter:fix",
    run_by_default=False,
    dependencies=["docformatter[tomli]<1.7.1"],
    requires=["isort:fix"],
)
dwas.register_managed_step(
    dwas.predefined.black(additional_arguments=[]),
    name="black:fix",
    requires=["isort:fix", "docformatter:fix"],
    run_by_default=False,
)
dwas.register_managed_step(
    dwas.predefined.ruff(
        files=PYTHON_FILES,
        additional_arguments=["check", "--fix", "--show-fixes", "--fix-only"],
    ),
    dependencies=["ruff"],
    python=OLDEST_SUPPORTED_PYTHON,
    name="ruff:fix",
    requires=["black:fix"],
    run_by_default=False,
)
dwas.register_step_group(
    name="fix",
    description="Fix all auto-fixable issues on the project",
    requires=[
        "unimport:fix",
        "isort:fix",
        "docformatter:fix",
        "black:fix",
        "ruff:fix",
    ],
    run_by_default=False,
)


##
# Linting
##
dwas.register_managed_step(
    dwas.predefined.mypy(files=PYTHON_FILES),
    dependencies=[
        "mypy",
        DOCS_REQUIREMENTS,
        TEST_REQUIREMENTS,
        TYPES_REQUIREMENTS,
    ],
    python=OLDEST_SUPPORTED_PYTHON,
)
dwas.register_managed_step(
    dwas.predefined.pylint(files=PYTHON_FILES),
    dependencies=[
        REQUIREMENTS,
        DOCS_REQUIREMENTS,
        TEST_REQUIREMENTS,
        "pylint",
        "tabulate",
    ],
    python=OLDEST_SUPPORTED_PYTHON,
)
dwas.register_managed_step(
    dwas.predefined.ruff(files=PYTHON_FILES),
    dependencies=["ruff"],
    python=OLDEST_SUPPORTED_PYTHON,
)
dwas.register_step_group("lint", ["mypy", "pylint", "ruff"])

##
# Packaging
##
dwas.register_managed_step(
    dwas.predefined.package(isolate=False),
    dependencies=["build", "setuptools>=61.0.0", "wheel"],
)

##
# Testing
##
dwas.register_managed_step(
    dwas.parametrize("description", ("Run tests for python {python}",))(
        dwas.parametrize("python", SUPPORTED_PYTHONS)(dwas.predefined.pytest())
    ),
    dependencies=[TEST_REQUIREMENTS],
    passenv=["TERM"],
    requires=["package"],
    description="Run tests for all supported python versions",
)

##
# Reports
##
dwas.register_managed_step(
    dwas.predefined.coverage(
        reports=[
            ["report", "--show-missing"],
            ["html", f"--directory={ARTIFACTS_PATH / 'coverage/html'}"],
            ["xml", f"-o{ARTIFACTS_PATH / 'coverage/coverage.xml'}"],
        ],
    ),
    requires=["pytest"],
    dependencies=["coverage[toml]"],
    description="Report coverage from the tests",
)

##
# Docs
##
# TODO: this technically doesn't clean the autogenerated api files, we should
#       clean them up on dwas --clean.
dwas.register_managed_step(
    dwas.parametrize(
        ("builder", "output", "description"),
        [
            (
                "html",
                ARTIFACTS_PATH / "docs",
                "Build an HTML version of the docs",
            ),
            ("linkcheck", None, "Check that all links in the docs are valid"),
            ("spelling", None, "Check spelling for the docs"),
        ],
        ids=["html", "linkcheck", "spelling"],
    )(
        dwas.predefined.sphinx(
            sourcedir=DOCS_SOURCES_PATH,
            warning_as_error=True,
        )
    ),
    name="docs",
    description="Build and validate the documentation",
    dependencies=[DOCS_REQUIREMENTS],
    requires=["package"],
    run_by_default=False,
)

##
# Publishing
##
# FIXME: this is wasteful as it will install the wheel in the venv, we don't
#        need this. We should be able to skip the seutp of dependents
dwas.register_managed_step(
    dwas.predefined.twine(), name="twine:check", requires=["package"]
)
dwas.register_managed_step(
    dwas.predefined.twine(
        additional_arguments=[
            "upload",
            "--verbose",
            "--sign",
            "--non-interactive",
        ],
    ),
    name="twine:upload",
    passenv=["TWINE_REPOSITORY", "TWINE_USERNAME", "TWINE_PASSWORD"],
    requires=["package", "twine:check"],
    run_by_default=False,
)

##
# Reproduce all that CI does
dwas.register_step_group(
    "ci",
    ["docs", "format-check", "lint", "coverage", "twine:check"],
    "Run all checks that are run on CI",
    run_by_default=False,
)
